"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    books: [Book] @all
    book(id: ID @eq): Book @find
    featuredBooks(featured: Boolean! @eq): [Book] @all
    searchBooksByAuthor(search: String!): [Book]

    categories: [Category] @all
    category(id: ID @eq): Category @find
}

type Mutation {
    createCategory(input: CreateCategoryInput! @spread): Category @create

    updateCategory(input: UpdateCategoryInput! @spread): Category @update

    deleteCategory(input: DeleteCategoryInput! @spread): Category @delete

    createBook(input: CreateBookInput! @spread): Book @create

    updateBook(input: UpdateBookInput! @spread): Book @update

    deleteBook(input: DeleteBookInput! @spread): Book @delete
}

input CreateBookInput {
    title: String!
    author: String!
    category: CreateCategoryBelongsTo
}

input UpdateBookInput {
    id: ID!
    title: String! @rules(apply: ["required"])
    author: String! @rules(apply: ["required"])
    image: String
    link: String
    description: String
    featured: Boolean
    category: CreateCategoryBelongsTo
}

input DeleteBookInput {
    id: ID! @rules(apply: ["required"])
}

input CreateCategoryBelongsTo {
    connect: ID
    create: CreateCategoryInput
    update: UpdateCategoryInput
    delete: DeleteCategoryInput
}

input CreateCategoryInput {
    name: String @rules(apply: ["required", "unique:categories,name"])
}

input UpdateCategoryInput {
    id: ID @rules(apply: ["required"])
    name: String @rules(apply: ["required", "unique:categories,name"])
}

input DeleteCategoryInput {
    id: ID! @rules(apply: ["required"])
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    category: Category @belongsTo
}

type Category {
    id: ID!
    name: String!
    books: [Book] @hasMany
}
